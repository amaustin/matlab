function number = BestResponse(game, playerPosition)

% playerPosition given in row and column (1x2 matrix)

row = playerPosition(1,1)
col = playerPosition(1,2)
% need section function


% remember the number that gives the highest penalty
%
% if I want to put 1...2..3...or 4 in playerposition 
% or stay the same

% currently configured for stay the same

% do a game check with 1, 2, 3 and 4
% duplicated game with those values inserted.
game1 = game;
game2 = game;
game3 = game;
game4 = game;

game1(row, col) = 1
game2(row, col) = 2
game3(row, col) = 3
game4(row, col) = 4

% check these games for penalties
% and choose the best response number from the one with the lowest penalty

game

% intitialize gamePenalty
gamePenalty = zeros(1, 4);


gamePenalty(1, 1) = penaltyCalc(game1, row, col);

gamePenalty(1, 2) = penaltyCalc(game2, row, col);

gamePenalty(1, 3) = penaltyCalc(game3, row, col);

gamePenalty(1, 4) = penaltyCalc(game4, row, col)

% get the index of the minimum values
I = find(gamePenalty == min(gamePenalty))

% compare that index with the current value to choose BR

for k = 1:length(I)
 if I(k) == game(row, col)
     number = game(row,col);
     
 else 
     
    number == I(k);
 end
    
end




% game1Penalty = penaltyCalc(game1, row, col)
% 
% game2Penalty = penaltyCalc(game2, row, col)
% 
% game3Penalty = penaltyCalc(game3, row, col)
% 
% game4Penalty = penaltyCalc(game4, row, col)


% also check if one of the best responses is the current response

% if game1Penalty > game2Penalty
%     number  = 2;
% end
% 
% if game2Penalty > game3Penalty
%     number  = 3;
% end
% 
% if game3Penalty > game4Penalty
%     number  = 4;
% end
% 
% if game4Penalty > game1Penalty
%     number  = 1;
% end





    

 


% % search for duplicate values in row and col
% for i = 1:4
%     if game(row, i) == game(row, col) && i ~= col
%         penalty = penalty + 1;
%     end
%     
%     if game(i, col) == game(row, col) && i ~= row
%         penalty = penalty + 1;
%     end
% end
% 
% 
% % search section 1
% if (game(1,1) == game(row,col)) && (row ~=1 && col~= 1)
%     penalty = penalty + 1;
% end
% 
% if (game(1,2) == game(row,col)) && (row ~=1 && col~= 2)
%     penalty = penalty + 1;
% end
% 
% if (game(2,1) == game(row,col)) && (row ~=2 && col~= 1)
%     penalty = penalty + 1;
% end
% if (game(2,2) == game(row,col)) && (row ~=2 && col~= 2)
%     penalty = penalty + 1;
% end
% 
% % search section 2
% if (game(1,3) == game(row,col)) && (row ~=1 && col~= 3)
%     penalty = penalty + 1;
% end
% 
% if (game(1,4) == game(row,col)) && (row ~=1 && col~= 4)
%     penalty = penalty + 1;
% end
% 
% if (game(2,3) == game(row,col)) && (row ~=2 && col~= 3)
%     penalty = penalty + 1;
% end
% if (game(2,4) == game(row,col)) && (row ~=2 && col~= 4)
%     penalty = penalty + 1;
% end
% 
% % search section 3
% if (game(3,1) == game(row,col)) && (row ~=3 && col~= 1)
%     penalty = penalty + 1;
% end
% 
% if (game(3,2) == game(row,col)) && (row ~=3 && col~= 2)
%     penalty = penalty + 1;
% end
% 
% if (game(4,1) == game(row,col)) && (row ~=4 && col~= 1)
%     penalty = penalty + 1;
% end
% if (game(4,2) == game(row,col)) && (row ~=4 && col~= 2)
%     penalty = penalty + 1;
% end
% 
% % search section 2
% if (game(3,3) == game(row,col)) && (row ~=3 && col~= 3)
%     penalty = penalty + 1;
% end
% 
% if (game(3,4) == game(row,col)) && (row ~=3 && col~= 4)
%     penalty = penalty + 1;
% end
% 
% if (game(4,3) == game(row,col)) && (row ~=4 && col~= 3)
%     penalty = penalty + 1;
% end
% if (game(4,4) == game(row,col)) && (row ~=4 && col~= 4)
%     penalty = penalty + 1;
% end
% 
% 
% % for now see if penalties add up correctly
% 
% 
% number = penalty;


% calculate penalties based on other values in section row and column
%
% if duplicate values in section: 1 pt
%                            row: 1 pt
%                            col: 1 pt
% maximum penalty: 3 pts for choosing a value between 1 & 4
% minimum penalty: 0 pts
% minimum penalty = number to choose

% if current value is best response - stay
% if not, choose new arbitrary best response

